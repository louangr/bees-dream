/* tslint:disable */
/* eslint-disable */
/**
 * Bee\'s Dream beekeepers and monodoses APIs
 * Bee\'s Dream beekeepers and monodoses APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: by@carrier.pigeon
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Login404Response,
    Login404ResponseFromJSON,
    Login404ResponseToJSON,
    Monodose,
    MonodoseFromJSON,
    MonodoseToJSON,
} from '../models';

export interface AddMonodoseRequest {
    monodose: Monodose;
}

export interface DeleteMonodoseByIdRequest {
    id: string;
}

export interface GetMonodoseByIdRequest {
    id: string;
}

export interface UpdateMonodoseRequest {
    monodose: Monodose;
}

/**
 * 
 */
export class MonodoseApi extends runtime.BaseAPI {

    /**
     * If the request body format is not correct, a 400 status code will be returned
     * Create a new monodose
     */
    async addMonodoseRaw(requestParameters: AddMonodoseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Monodose>> {
        if (requestParameters.monodose === null || requestParameters.monodose === undefined) {
            throw new runtime.RequiredError('monodose','Required parameter requestParameters.monodose was null or undefined when calling addMonodose.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/monodose`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MonodoseToJSON(requestParameters.monodose),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonodoseFromJSON(jsonValue));
    }

    /**
     * If the request body format is not correct, a 400 status code will be returned
     * Create a new monodose
     */
    async addMonodose(requestParameters: AddMonodoseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Monodose> {
        const response = await this.addMonodoseRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * If the monodose is not found, a 404 status code will be returned
     * Delete a monodose by Id
     */
    async deleteMonodoseByIdRaw(requestParameters: DeleteMonodoseByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Monodose>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMonodoseById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/monodose/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonodoseFromJSON(jsonValue));
    }

    /**
     * If the monodose is not found, a 404 status code will be returned
     * Delete a monodose by Id
     */
    async deleteMonodoseById(requestParameters: DeleteMonodoseByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Monodose> {
        const response = await this.deleteMonodoseByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * If the are not monodoses, an empty array will be returned
     * Return all monodoses
     */
    async getAllMonodosesRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Array<Monodose>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/monodose`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MonodoseFromJSON));
    }

    /**
     * If the are not monodoses, an empty array will be returned
     * Return all monodoses
     */
    async getAllMonodoses(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Array<Monodose>> {
        const response = await this.getAllMonodosesRaw(initOverrides);
        return await response.value();
    }

    /**
     * If the monodose is not found, a 404 status code will be returned
     * Return a monodose by Id
     */
    async getMonodoseByIdRaw(requestParameters: GetMonodoseByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Monodose>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMonodoseById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/monodose/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonodoseFromJSON(jsonValue));
    }

    /**
     * If the monodose is not found, a 404 status code will be returned
     * Return a monodose by Id
     */
    async getMonodoseById(requestParameters: GetMonodoseByIdRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Monodose> {
        const response = await this.getMonodoseByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * If the request body format is not correct or the target monodose Id is not found, a 400 status code will be returned
     * Update an existing monodose
     */
    async updateMonodoseRaw(requestParameters: UpdateMonodoseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Monodose>> {
        if (requestParameters.monodose === null || requestParameters.monodose === undefined) {
            throw new runtime.RequiredError('monodose','Required parameter requestParameters.monodose was null or undefined when calling updateMonodose.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/monodose`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MonodoseToJSON(requestParameters.monodose),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonodoseFromJSON(jsonValue));
    }

    /**
     * If the request body format is not correct or the target monodose Id is not found, a 400 status code will be returned
     * Update an existing monodose
     */
    async updateMonodose(requestParameters: UpdateMonodoseRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Monodose> {
        const response = await this.updateMonodoseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
