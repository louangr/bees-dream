{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Bee's Dream beekeepers and monodoses APIs",
    "title": "Bee's Dream beekeepers and monodoses APIs",
    "contact": {
      "name": "21Team",
      "email": "by@carrier.pigeon"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/login": {
      "post": {
        "description": "Ask for login by send Login object in the request body",
        "tags": [
          "login"
        ],
        "summary": "Ask for login",
        "operationId": "Login",
        "parameters": [
          {
            "description": "login info to check",
            "name": "login",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/loggedStruct"
          },
          "404": {
            "$ref": "#/responses/errorsJson"
          },
          "500": {
            "$ref": "#/responses/errorsJson"
          }
        }
      }
    },
    "/monodose": {
      "get": {
        "description": "If the are not monodoses, an empty array will be returned",
        "tags": [
          "monodose"
        ],
        "summary": "Return all monodoses",
        "operationId": "GetAllMonodoses",
        "responses": {
          "200": {
            "$ref": "#/responses/monodoseStructArray"
          },
          "500": {
            "$ref": "#/responses/errorsJson"
          }
        }
      },
      "put": {
        "description": "If the request body format is not correct or the target monodose Id is not found, a 400 status code will be returned",
        "tags": [
          "monodose"
        ],
        "summary": "Update an existing monodose",
        "operationId": "UpdateMonodose",
        "parameters": [
          {
            "description": "monodose to update",
            "name": "monodose",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Monodose"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/monodoseStruct"
          },
          "404": {
            "$ref": "#/responses/errorsJson"
          },
          "500": {
            "$ref": "#/responses/errorsJson"
          }
        }
      },
      "post": {
        "description": "If the request body format is not correct, a 400 status code will be returned",
        "tags": [
          "monodose"
        ],
        "summary": "Create a new monodose",
        "operationId": "AddMonodose",
        "parameters": [
          {
            "description": "monodose to add",
            "name": "monodose",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Monodose"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/monodoseStruct"
          },
          "400": {
            "$ref": "#/responses/errorsJson"
          },
          "500": {
            "$ref": "#/responses/errorsJson"
          }
        }
      }
    },
    "/monodose/{id}": {
      "get": {
        "description": "If the monodose is not found, a 404 status code will be returned",
        "tags": [
          "monodose"
        ],
        "summary": "Return a monodose by Id",
        "operationId": "GetMonodoseById",
        "parameters": [
          {
            "type": "string",
            "description": "correspond to the monodose's Id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/monodoseStruct"
          },
          "404": {
            "$ref": "#/responses/errorsJson"
          },
          "500": {
            "$ref": "#/responses/errorsJson"
          }
        }
      },
      "delete": {
        "description": "If the monodose is not found, a 404 status code will be returned",
        "tags": [
          "monodose"
        ],
        "summary": "Delete a monodose by Id",
        "operationId": "DeleteMonodoseById",
        "parameters": [
          {
            "type": "string",
            "description": "correspond to the monodose's Id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/monodoseStruct"
          },
          "404": {
            "$ref": "#/responses/errorsJson"
          },
          "500": {
            "$ref": "#/responses/errorsJson"
          }
        }
      }
    },
    "/user": {
      "get": {
        "description": "If the are not users, an empty array will be returned",
        "tags": [
          "user"
        ],
        "summary": "Return all users",
        "operationId": "GetAllUsers",
        "responses": {
          "200": {
            "$ref": "#/responses/userStructArray"
          },
          "500": {
            "$ref": "#/responses/errorsJson"
          }
        }
      },
      "put": {
        "description": "If the request body format is not correct or the target user Id is not found, a 400 status code will be returned",
        "tags": [
          "user"
        ],
        "summary": "Update an existing user",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "description": "user to update",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/userStruct"
          },
          "404": {
            "$ref": "#/responses/errorsJson"
          },
          "500": {
            "$ref": "#/responses/errorsJson"
          }
        }
      },
      "post": {
        "description": "If the request body format is not correct, a 400 status code will be returned",
        "tags": [
          "user"
        ],
        "summary": "Create a new user",
        "operationId": "AddUser",
        "parameters": [
          {
            "description": "user to add",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/userStruct"
          },
          "400": {
            "$ref": "#/responses/errorsJson"
          },
          "500": {
            "$ref": "#/responses/errorsJson"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "description": "If the user is not found, a 404 status code will be returned",
        "tags": [
          "user"
        ],
        "summary": "Return a user by Id",
        "operationId": "GetUserById",
        "parameters": [
          {
            "type": "string",
            "description": "correspond to the user's Id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/userStruct"
          },
          "404": {
            "$ref": "#/responses/errorsJson"
          },
          "500": {
            "$ref": "#/responses/errorsJson"
          }
        }
      },
      "delete": {
        "description": "If the user is not found, a 404 status code will be returned",
        "tags": [
          "user"
        ],
        "summary": "Delete a user by Id",
        "operationId": "DeleteUserById",
        "parameters": [
          {
            "type": "string",
            "description": "correspond to the user's Id",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/userStruct"
          },
          "404": {
            "$ref": "#/responses/errorsJson"
          },
          "500": {
            "$ref": "#/responses/errorsJson"
          }
        }
      }
    }
  },
  "definitions": {
    "Beekeeper": {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Age"
        },
        "company": {
          "type": "string",
          "x-go-name": "Company"
        },
        "firstname": {
          "type": "string",
          "x-go-name": "FirstName"
        },
        "lastname": {
          "type": "string",
          "x-go-name": "LastName"
        }
      },
      "x-go-package": "internal/entities"
    },
    "Date": {
      "type": "object",
      "properties": {
        "dluo": {
          "type": "string",
          "x-go-name": "Dluo"
        },
        "endOfProduction": {
          "type": "string",
          "x-go-name": "EndOfProduction"
        },
        "startOfProduction": {
          "type": "string",
          "x-go-name": "Make"
        }
      },
      "x-go-package": "internal/entities"
    },
    "ErrorsJson": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Code"
        },
        "message": {
          "type": "string",
          "x-go-name": "Message"
        }
      },
      "x-go-package": "internal/persistence/errors"
    },
    "Information": {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Age"
        },
        "company": {
          "type": "string",
          "x-go-name": "Company"
        },
        "firstname": {
          "type": "string",
          "x-go-name": "FirstName"
        },
        "lastname": {
          "type": "string",
          "x-go-name": "LastName"
        }
      },
      "x-go-package": "internal/entities"
    },
    "Logged": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "x-go-name": "Token"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "x-go-package": "internal/entities"
    },
    "Login": {
      "type": "object",
      "properties": {
        "login": {
          "type": "string",
          "x-go-name": "Login"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        }
      },
      "x-go-package": "internal/entities"
    },
    "Monodose": {
      "type": "object",
      "properties": {
        "beekeeper": {
          "$ref": "#/definitions/Beekeeper"
        },
        "dates": {
          "$ref": "#/definitions/Date"
        },
        "honeyVariety": {
          "type": "string",
          "x-go-name": "HoneyVariety"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "location": {
          "type": "string",
          "x-go-name": "Location"
        }
      },
      "x-go-package": "internal/entities"
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Id"
        },
        "informations": {
          "$ref": "#/definitions/Information"
        },
        "login": {
          "type": "string",
          "x-go-name": "Login"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "role": {
          "type": "string",
          "x-go-name": "Role"
        }
      },
      "x-go-package": "internal/entities"
    }
  },
  "responses": {
    "errorsJson": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/ErrorsJson"
      }
    },
    "loggedStruct": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Logged"
      }
    },
    "loginStruct": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Login"
      }
    },
    "monodoseStruct": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/Monodose"
      }
    },
    "monodoseStructArray": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Monodose"
        }
      }
    },
    "userStruct": {
      "description": "",
      "schema": {
        "$ref": "#/definitions/User"
      }
    },
    "userStructArray": {
      "description": "",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/User"
        }
      }
    }
  }
}